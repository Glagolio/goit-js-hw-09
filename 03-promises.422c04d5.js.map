{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SAgBpC,SAASC,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC7B,MAAMC,EAAgBC,KAAKC,SAAW,GACpCC,YAAW,KACLH,EACJF,EAAQ,qBAAqBH,QAAeC,OAE5CG,EAAO,oBAAoBJ,QAAeC,SAE3CA,MAvBLL,EAAKa,iBAAiB,UAAUC,IAC9BA,EAAEC,iBAEF,IAAIC,EAAQC,OAAOjB,EAAKK,MAAMa,OAE9B,IAAK,IAAIC,EAAI,EAAGA,GAAKF,OAAOjB,EAAKoB,OAAOF,OAAQC,GAAK,EACnDhB,EAAcgB,EAAIH,GAAOK,MAAKC,GAAUC,EAAAzB,GAAS0B,OAAOC,QAAQH,KAASI,OAAMC,GAASJ,EAAAzB,GAAS0B,OAAOI,QAAQD,KAEhHX,GAASC,OAAOjB,EAAK6B,KAAKX","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n\n  let DELAY = Number(form.delay.value);\n\n  for (let i = 1; i <= Number(form.amount.value); i += 1) {\n    createPromise(i , DELAY).then(result => Notiflix.Notify.success(result)).catch(error => Notiflix.Notify.failure(error));\n    \n    DELAY += Number(form.step.value);\n  }\n\n})\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n  const shouldResolve = Math.random() > 0.3;\n    setTimeout(() => {\n      if (shouldResolve) {\n      resolve(`Fulfilled promise ${position} in ${delay}ms`);\n   } else {\n      reject(`Rejected promise ${position} in ${delay}ms`);\n   }\n  }, delay)})\n  \n};\n\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","DELAY","Number","value","i","amount","then","result","$parcel$interopDefault","Notify","success","catch","error","failure","step"],"version":3,"file":"03-promises.422c04d5.js.map"}